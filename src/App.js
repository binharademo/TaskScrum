import React, { useState, useEffect } from 'react';
import { 
  AppBar, 
  Toolbar, 
  Typography, 
  Container, 
  Box, 
  Tabs, 
  Tab,
  IconButton,
  Tooltip,
  Alert,
  AlertTitle,
  Collapse,
  Fade,
  Chip,
  CircularProgress
} from '@mui/material';
import { 
  Dashboard as DashboardIcon, 
  TableChart as TableIcon,
  Analytics as AnalyticsIcon,
  Speed as SpeedIcon,
  Psychology as PsychologyIcon,
  Upload as UploadIcon,
  Brightness4,
  Brightness7,
  Delete as DeleteIcon,
  Download as DownloadIcon,
  Group as GroupIcon,
  CloudSync as CloudSyncIcon,
  Share as ShareIcon,
  Google as GoogleIcon,
  Save as SaveIcon,
  CloudUpload as MigrateIcon,
  BugReport as TestIcon,
  ContentCopy as CopyIcon
} from '@mui/icons-material';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import SimpleKanban from './components/SimpleKanban';
import TableView from './components/TableView';
import BurndownChart from './components/BurndownChart';
import WIPControl from './components/WIPControl';
import PredictiveAnalysis from './components/PredictiveAnalysis';
import GoogleSheetsSimple from './components/GoogleSheetsSimple';
import ProjectSharing from './components/ProjectSharing';
import DemoModeInfo from './components/DemoModeInfo';
import WelcomeWizard from './components/WelcomeWizard';
import { loadTasksFromStorage, saveTasksToStorage, getCurrentRoom, setCurrentRoom } from './utils/storage';
import { isFirstAccess, markWizardCompleted, getWizardResult, resetWizard } from './utils/firstAccess';
import RoomSelector from './components/RoomSelector';
import MigrationWizard from './components/MigrationWizard';
import IntegrationTests from './components/IntegrationTests';
import { importExcelFile } from './utils/excelImport';
import { loadSampleData } from './utils/sampleData';
// Removido: simpleSheets - usando abordagem mais simples
import { generateDemoData, getDemoDescription } from './services/demoData';

// TaskContext integration (h√≠brido - n√£o quebra interface atual)
import { TaskProvider, useTaskContext } from './contexts/TaskContext';
import { isSupabaseConfigured } from './config/supabase';
import { AuthProvider, useAuth } from './contexts/AuthContext';

function TabPanel({ children, value, index, ...other }) {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

// Componente interno que usa AuthContext e TaskContext
function AppContent() {
  // AuthContext para teste
  const auth = isSupabaseConfigured() ? useAuth() : { isAuthenticated: false, user: null };
  
  // TaskContext para persist√™ncia autom√°tica h√≠brida (localStorage + Supabase)
  const { 
    tasks: contextTasks, 
    loadTasks: contextLoadTasks, 
    addTask, 
    updateTask, 
    deleteTask, 
    bulkUpdate, 
    loading: contextLoading, 
    error: contextError,
    isSupabaseMode,
    persistenceMode
  } = useTaskContext();
  
  const [currentTab, setCurrentTab] = useState(0);
  const [tasks, setTasks] = useState(contextTasks);
  const [darkMode, setDarkMode] = useState(false);
  const [currentRoom, setCurrentRoomState] = useState('');
  const [roomSelectorOpen, setRoomSelectorOpen] = useState(false);
  
  // Google Sheets integration
  const [user, setUser] = useState(null);
  const [projectInfo, setProjectInfo] = useState(null);
  const [syncStatus, setSyncStatus] = useState(null);
  const [showGoogleAuth, setShowGoogleAuth] = useState(false);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [isDemoMode, setIsDemoMode] = useState(false);
  const [demoDescription, setDemoDescription] = useState(null);
  const [migrationWizardOpen, setMigrationWizardOpen] = useState(false);
  const [integrationTestsOpen, setIntegrationTestsOpen] = useState(false);
  
  // Estados para o wizard de primeiro acesso
  const [showWelcomeWizard, setShowWelcomeWizard] = useState(false);
  const [wizardResult, setWizardResult] = useState(null);

  // Detectar primeiro acesso e mostrar wizard
  useEffect(() => {
    console.log('üîç AppContent - Verificando primeiro acesso...');
    
    if (isFirstAccess()) {
      console.log('üéâ AppContent - Primeiro acesso detectado, mostrando wizard');
      setShowWelcomeWizard(true);
    } else {
      console.log('‚úÖ AppContent - Usu√°rio j√° conhece o sistema');
      const result = getWizardResult();
      if (result) {
        console.log('üìã AppContent - Resultado do wizard anterior:', result);
        setWizardResult(result);
      }
    }
  }, []);

  // Sincronizar tasks do TaskContext com estado local
  useEffect(() => {
    console.log('üîÑ AppContent - Sincronizando tasks do TaskContext:', contextTasks.length);
    setTasks(contextTasks);
  }, [contextTasks]);

  // =============================================
  // FUN√á√ÉO PARA TESTAR WIZARD (DEVELOPMENT)
  // =============================================
  const handleTestWizard = () => {
    if (window.confirm('üß™ Resetar wizard para teste?\n\nIsso vai:\n‚Ä¢ Limpar flag de wizard conclu√≠do\n‚Ä¢ Abrir wizard na pr√≥xima vez\n‚Ä¢ √ötil para testar a experi√™ncia de primeiro acesso')) {
      resetWizard();
      console.log('üîÑ Wizard resetado, recarregando p√°gina...');
      window.location.reload();
    }
  };

  // =============================================
  // FUN√á√ÉO PARA FINALIZAR WIZARD DE PRIMEIRO ACESSO
  // =============================================
  const handleWizardComplete = async (result) => {
    console.log('üéØ handleWizardComplete - Processando resultado do wizard:', result);
    
    try {
      setWizardResult(result);
      
      // Processar baseado no modo escolhido
      switch (result.mode) {
        case 'local':
          console.log('üíª handleWizardComplete - Modo local selecionado');
          // N√£o precisa fazer nada especial, sistema j√° funciona local
          break;
          
        case 'cloud':
          console.log('‚òÅÔ∏è handleWizardComplete - Modo nuvem selecionado');
          // Mostrar modal de autentica√ß√£o se Supabase estiver configurado
          if (isSupabaseConfigured()) {
            console.log('üîê handleWizardComplete - Direcionando para autentica√ß√£o');
            if (!auth?.isAuthenticated) {
              // Simular clique no bot√£o de login se usu√°rio n√£o estiver autenticado
              setTimeout(() => {
                console.log('‚ö° handleWizardComplete - Abrindo fluxo de login');
                handleTestLogin();
              }, 500);
            } else {
              console.log('‚úÖ handleWizardComplete - Usu√°rio j√° autenticado:', auth.user?.email);
            }
          } else {
            console.warn('‚ö†Ô∏è handleWizardComplete - Supabase n√£o configurado');
            alert('‚ö†Ô∏è Modo nuvem n√£o dispon√≠vel. Supabase n√£o est√° configurado.\n\nUsando modo local temporariamente.');
          }
          break;
          
        case 'shared':
          console.log('üîó handleWizardComplete - Modo sala compartilhada selecionado');
          console.log('   ‚îî‚îÄ C√≥digo da sala:', result.roomCode);
          // Abrir seletor de salas com o c√≥digo pr√©-preenchido
          setWizardResult(result); // Salvar o resultado para passar o c√≥digo
          setRoomSelectorOpen(true);
          break;
          
        default:
          console.warn('‚ö†Ô∏è handleWizardComplete - Modo desconhecido:', result.mode);
      }
      
      // Fechar wizard
      setShowWelcomeWizard(false);
      
      console.log('‚úÖ handleWizardComplete - Wizard finalizado com sucesso');
      
    } catch (error) {
      console.error('‚ùå handleWizardComplete - Erro ao processar resultado:', error);
    }
  };

  // Fun√ß√£o para calcular viola√ß√µes WIP globalmente
  const calculateWIPViolations = () => {
    const savedConfig = localStorage.getItem('wipConfig');
    if (!savedConfig) return [];

    const config = JSON.parse(savedConfig);
    const limits = config.limits || {};
    
    const statusCounts = {
      'Backlog': 0,
      'Priorizado': 0,
      'Doing': 0,
      'Done': 0
    };

    tasks.forEach(task => {
      statusCounts[task.status] = (statusCounts[task.status] || 0) + 1;
    });

    const violations = [];
    Object.entries(limits).forEach(([status, limit]) => {
      if (limit && statusCounts[status] > limit) {
        violations.push({
          status,
          current: statusCounts[status],
          limit,
          excess: statusCounts[status] - limit
        });
      }
    });

    return violations;
  };

  const wipViolations = calculateWIPViolations();

  useEffect(() => {
    const initializeApp = async () => {
      // Modo local por padr√£o - s√≥ mostra Google se usu√°rio solicitar
      // Limpar configura√ß√£o anterior se houver
      const shouldShowGoogle = localStorage.getItem('useGoogleSheets') === 'true';
      setShowGoogleAuth(shouldShowGoogle);
      
      // Se n√£o for para mostrar Google, continue com modo local
      if (shouldShowGoogle) {
        return;
      }
      
      // Verificar sala atual
      const room = getCurrentRoom();
      setCurrentRoomState(room || '');
      
      // Se n√£o h√° sala selecionada, abrir seletor
      if (!room) {
        setRoomSelectorOpen(true);
        return;
      }
      
      // Carregar dados da sala atual
      const savedTasks = loadTasksFromStorage();
      const wasCleared = localStorage.getItem('tasksCleared') === 'true';
      
      if (savedTasks.length > 0) {
        // Migrar tarefas existentes para incluir reestimativas
        const migratedTasks = savedTasks.map(task => ({
          ...task,
          reestimativas: task.reestimativas || Array.from({ length: 10 }, () => task.estimativa || 0)
        }));
        setTasks(migratedTasks);
        saveTasksToStorage(migratedTasks);
      } else if (!wasCleared) {
        // S√≥ carrega dados de exemplo se n√£o foi zerado pelo usu√°rio
        const sampleTasks = await loadSampleData();
        if (sampleTasks.length > 0) {
          // Garantir que todas as tarefas tenham o campo reestimativas
          const tasksWithReestimativas = sampleTasks.map(task => ({
            ...task,
            reestimativas: task.reestimativas || Array.from({ length: 10 }, () => task.estimativa || 0)
          }));
          setTasks(tasksWithReestimativas);
          saveTasksToStorage(tasksWithReestimativas);
        }
      }
      
      const savedTheme = localStorage.getItem('darkMode');
      if (savedTheme) {
        setDarkMode(JSON.parse(savedTheme));
      }
      
      // Verificar se est√° no modo demo espec√≠fico da sala atual
      if (room) {
        const roomDemoMode = localStorage.getItem(`demoMode_${room}`) === 'true';
        setIsDemoMode(roomDemoMode);
        
        if (roomDemoMode) {
          const roomDemoDescription = localStorage.getItem(`demoDescription_${room}`);
          if (roomDemoDescription) {
            setDemoDescription(JSON.parse(roomDemoDescription));
          }
        }
      } else {
        // Verificar modo demo global (legado)
        const demoMode = localStorage.getItem('demoMode') === 'true';
        setIsDemoMode(demoMode);
        
        if (demoMode) {
          const savedDescription = localStorage.getItem('demoDescription');
          if (savedDescription) {
            setDemoDescription(JSON.parse(savedDescription));
          }
        }
      }
    };
    
    initializeApp();
    
    // Monitorar status de conex√£o
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    // Monitorar sincroniza√ß√£o
    const handleSyncComplete = (event) => {
      setSyncStatus('success');
      setTasks(event.detail.tasks);
      setTimeout(() => setSyncStatus(null), 3000);
    };
    
    const handleSyncError = (event) => {
      setSyncStatus('error');
      setTimeout(() => setSyncStatus(null), 5000);
    };
    
    window.addEventListener('tasktracker-sync-complete', handleSyncComplete);
    window.addEventListener('tasktracker-sync-error', handleSyncError);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      window.removeEventListener('tasktracker-sync-complete', handleSyncComplete);
      window.removeEventListener('tasktracker-sync-error', handleSyncError);
    };
  }, []);

  const handleTabChange = (event, newValue) => {
    setCurrentTab(newValue);
  };

  const handleTasksUpdate = async (updatedTasks) => {
    console.log('üîÑ handleTasksUpdate - IN√çCIO:', updatedTasks.length, 'tarefas');
    console.log('   ‚îî‚îÄ Modo de persist√™ncia:', persistenceMode);
    
    try {
      // Garantir que todas as tarefas tenham timestamps
      const tasksWithTimestamps = updatedTasks.map(task => ({
        ...task,
        updatedAt: task.updatedAt || new Date().toISOString(),
        createdAt: task.createdAt || new Date().toISOString(),
        dataAtualizacao: new Date().toISOString()
      }));
      
      console.log('üíæ handleTasksUpdate - Salvando via TaskContext (persist√™ncia autom√°tica)');
      
      // Usar TaskContext para persist√™ncia autom√°tica (localStorage + Supabase se dispon√≠vel)
      await bulkUpdate(tasksWithTimestamps);
      
      // Atualizar estado local (sincroniza√ß√£o acontece via useEffect)
      setTasks(tasksWithTimestamps);
      
      console.log('‚úÖ handleTasksUpdate - Persist√™ncia conclu√≠da com sucesso');
      
      // Se carregando novos dados, remover flag de "zerado"
      if (tasksWithTimestamps.length > 0) {
        localStorage.removeItem('tasksCleared');
      }
    } catch (error) {
      console.error('‚ùå handleTasksUpdate - Erro na persist√™ncia:', error);
      // Fallback para localStorage em caso de erro
      console.log('üîÑ handleTasksUpdate - Usando fallback localStorage');
      setTasks(updatedTasks);
      saveTasksToStorage(updatedTasks);
    }
  };

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (file) {
      try {
        const importedTasks = await importExcelFile(file);
        handleTasksUpdate(importedTasks);
      } catch (error) {
        console.error('Error importing Excel file:', error);
      }
    }
  };

  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    setDarkMode(newDarkMode);
    localStorage.setItem('darkMode', JSON.stringify(newDarkMode));
  };

  const handleClearTasks = async () => {
    if (window.confirm('Tem certeza que deseja zerar todas as atividades? Esta a√ß√£o n√£o pode ser desfeita.')) {
      console.log('üóëÔ∏è handleClearTasks - Zerando todas as tarefas');
      console.log('   ‚îî‚îÄ Modo de persist√™ncia:', persistenceMode);
      
      try {
        // Usar TaskContext para persist√™ncia autom√°tica
        await bulkUpdate([]);
        setTasks([]);
        
        console.log('‚úÖ handleClearTasks - Tarefas zeradas com sucesso');
      } catch (error) {
        console.error('‚ùå handleClearTasks - Erro ao zerar:', error);
        // Fallback para localStorage
        setTasks([]);
        saveTasksToStorage([]);
      }
      
      // Marcar que a base foi zerada para n√£o recarregar dados de exemplo
      localStorage.setItem('tasksCleared', 'true');
      // Remover modo demo se estiver ativo na sala atual
      if (currentRoom) {
        localStorage.removeItem(`demoMode_${currentRoom}`);
        localStorage.removeItem(`demoDescription_${currentRoom}`);
      }
      // Remover modo demo global (legado)
      localStorage.removeItem('demoMode');
      localStorage.removeItem('demoDescription');
      setIsDemoMode(false);
      setDemoDescription(null);
    }
  };

  const handleRoomSelected = (roomCode) => {
    setCurrentRoomState(roomCode);
    setRoomSelectorOpen(false);
    
    // Carregar dados da nova sala
    const roomTasks = loadTasksFromStorage(roomCode);
    const migratedTasks = roomTasks.map(task => ({
      ...task,
      reestimativas: task.reestimativas || Array.from({ length: 10 }, () => task.estimativa || 0)
    }));
    setTasks(migratedTasks);
    
    // Verificar se a nova sala tem modo demo espec√≠fico
    const roomDemoMode = localStorage.getItem(`demoMode_${roomCode}`) === 'true';
    setIsDemoMode(roomDemoMode);
    
    if (roomDemoMode) {
      const roomDemoDescription = localStorage.getItem(`demoDescription_${roomCode}`);
      if (roomDemoDescription) {
        setDemoDescription(JSON.parse(roomDemoDescription));
      }
    } else {
      setDemoDescription(null);
    }
  };

  const handleOpenRoomSelector = () => {
    setRoomSelectorOpen(true);
  };

  const handleDownloadData = () => {
    const dataToExport = {
      tasks,
      exportDate: new Date().toISOString(),
      totalTasks: tasks.length,
      metadata: {
        version: '1.0',
        source: 'TaskTracker'
      }
    };
    
    const dataStr = JSON.stringify(dataToExport, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `tasktracker-data-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleCopyRoomId = async () => {
    if (!currentRoom) {
      alert('Nenhuma sala selecionada para copiar!');
      return;
    }

    try {
      await navigator.clipboard.writeText(currentRoom);
      // Feedback visual tempor√°rio
      const originalTitle = document.title;
      document.title = `‚úÖ ID da sala "${currentRoom}" copiado!`;
      
      setTimeout(() => {
        document.title = originalTitle;
      }, 2000);
      
      console.log(`üìã ID da sala copiado: ${currentRoom}`);
    } catch (error) {
      console.error('Erro ao copiar para √°rea de transfer√™ncia:', error);
      
      // Fallback para navegadores mais antigos
      try {
        const textArea = document.createElement('textarea');
        textArea.value = currentRoom;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        
        alert(`ID da sala copiado: ${currentRoom}\n\nCompartilhe este c√≥digo com sua equipe!`);
      } catch (fallbackError) {
        console.error('Fallback de c√≥pia tamb√©m falhou:', fallbackError);
        alert(`ID da sala: ${currentRoom}\n\nCopie manualmente este c√≥digo para compartilhar!`);
      }
    }
  };
  
  // Handlers para Google Sheets - vers√£o simplificada
  const handleGoogleAuthSuccess = async (user, project) => {
    setUser(user);
    setProjectInfo(project);
    setShowGoogleAuth(false);
  };
  
  const handleGoogleAuthError = (error) => {
    console.error('Erro na autentica√ß√£o Google:', error);
  };
  
  const handleToggleGoogleSheets = () => {
    if (showGoogleAuth) {
      // Voltar para modo local
      setShowGoogleAuth(false);
      localStorage.removeItem('useGoogleSheets');
      setUser(null);
      setProjectInfo(null);
    } else {
      // Ir para modo Google
      setShowGoogleAuth(true);
      localStorage.setItem('useGoogleSheets', 'true');
    }
  };
  
  const handleManualSync = () => {
    // Vers√£o simplificada - apenas mostra op√ß√£o Google Sheets
    setShowGoogleAuth(true);
  };
  
  const handleDemoMode = () => {
    // Carregar dados de demonstra√ß√£o
    const demoTasks = generateDemoData();
    const demoDescription = getDemoDescription();
    
    // Criar uma sala espec√≠fica para demo
    const demoRoomCode = 'DEMO-' + Date.now();
    setCurrentRoomState(demoRoomCode);
    setCurrentRoom(demoRoomCode);
    
    // Salvar dados demo na sala espec√≠fica
    handleTasksUpdate(demoTasks);
    
    // Salvar flag de modo demo espec√≠fico por sala
    localStorage.setItem(`demoMode_${demoRoomCode}`, 'true');
    localStorage.setItem(`demoDescription_${demoRoomCode}`, JSON.stringify(demoDescription));
    setIsDemoMode(true);
    setDemoDescription(demoDescription);
    
    // Sair do modo Google Auth
    setShowGoogleAuth(false);
    localStorage.removeItem('useGoogleSheets');
    
    // Mostrar notifica√ß√£o de sucesso
    console.log('Modo Demo ativado com', demoTasks.length, 'tarefas de exemplo');
  };
  
  const handleCloseDemoInfo = () => {
    setDemoDescription(null);
  };

  // Fun√ß√£o para for√ßar salvamento das tarefas atuais no Supabase
  const handleForceSaveToSupabase = async () => {
    try {
      console.log('üíæ handleForceSaveToSupabase - IN√çCIO');
      console.log('   ‚îî‚îÄ Tarefas atuais:', tasks.length);
      console.log('   ‚îî‚îÄ Modo Supabase ativo:', isSupabaseMode);
      console.log('   ‚îî‚îÄ Modo de persist√™ncia:', persistenceMode);

      if (!isSupabaseConfigured()) {
        alert('‚ùå Supabase n√£o configurado. Configure as credenciais no .env.local');
        return;
      }

      if (!auth?.isAuthenticated) {
        alert('‚ùå Usu√°rio n√£o autenticado. Fa√ßa login primeiro usando os bot√µes üìù ou üîê');
        return;
      }

      if (tasks.length === 0) {
        alert('‚ÑπÔ∏è Nenhuma tarefa para salvar. Crie algumas tarefas no board primeiro.');
        return;
      }

      console.log('üíæ handleForceSaveToSupabase - Salvando todas as tarefas via TaskContext');
      
      // For√ßar salvamento de todas as tarefas atuais
      await handleTasksUpdate(tasks);

      alert(`‚úÖ ${tasks.length} tarefas salvas com sucesso!\n\n` +
            `üîç Verifique no Supabase Dashboard:\n` +
            `‚Ä¢ Tabela 'tasks' deve ter ${tasks.length} registros\n` +
            `‚Ä¢ Console do navegador mostra logs detalhados\n\n` +
            `üìç Room: ${currentRoom || 'default'}\n` +
            `üë§ Usu√°rio: ${auth.user?.email}`);

    } catch (error) {
      console.error('‚ùå handleForceSaveToSupabase - Erro:', error);
      alert(`‚ùå Erro no salvamento: ${error.message}\n\n` +
            `üîç Verifique no console do navegador para mais detalhes`);
    }
  };

  // Fun√ß√£o de teste para cadastrar usu√°rio
  const handleTestSignUp = async () => {
    if (!isSupabaseConfigured()) {
      alert('‚ùå Supabase n√£o configurado');
      return;
    }

    try {
      const email = prompt('üìß Email para cadastro:', 'teste@tasktracker.com');
      if (!email) return;

      const password = prompt('üîê Senha (m√≠n. 6 caracteres):', '123456');
      if (!password) return;

      if (password.length < 6) {
        alert('‚ùå Senha deve ter pelo menos 6 caracteres');
        return;
      }

      const result = await auth.signUp(email, password);
      
      if (result.success) {
        if (result.needsConfirmation) {
          alert(`‚úÖ Usu√°rio cadastrado! Verifique seu email para confirmar.\nüìß Email: ${email}`);
        } else {
          alert(`‚úÖ Usu√°rio cadastrado e logado automaticamente!\nüë§ Email: ${email}\nüîÑ Modo Supabase ativado`);
        }
      } else {
        alert(`‚ùå Erro no cadastro: ${result.error}`);
      }
    } catch (error) {
      console.error('Erro no cadastro:', error);
      alert(`‚ùå Erro no cadastro: ${error.message}`);
    }
  };

  // Fun√ß√£o de teste para login r√°pido
  const handleTestLogin = async () => {
    if (!isSupabaseConfigured()) {
      alert('‚ùå Supabase n√£o configurado');
      return;
    }

    try {
      // Login com email/senha de teste
      const email = prompt('üìß Email para login:', 'teste@tasktracker.com');
      if (!email) return;

      const password = prompt('üîê Senha:', '123456');
      if (!password) return;

      const result = await auth.signIn(email, password);
      
      if (result.success) {
        alert(`‚úÖ Login realizado com sucesso!\nüë§ Usu√°rio: ${email}\nüîÑ Modo Supabase ativado`);
      } else {
        alert(`‚ùå Erro no login: ${result.error}\n\nüí° Dica: Talvez precise cadastrar o usu√°rio primeiro`);
      }
    } catch (error) {
      console.error('Erro no login:', error);
      alert(`‚ùå Erro no login: ${error.message}`);
    }
  };

  // Fun√ß√£o de teste para logout
  const handleTestLogout = async () => {
    try {
      await auth.signOut();
      alert('‚úÖ Logout realizado com sucesso!\nüîÑ Voltou para modo localStorage');
    } catch (error) {
      console.error('Erro no logout:', error);
      alert(`‚ùå Erro no logout: ${error.message}`);
    }
  };

  // Fun√ß√£o para abrir wizard de migra√ß√£o
  const handleOpenMigrationWizard = () => {
    setMigrationWizardOpen(true);
  };

  // Fun√ß√£o para finalizar migra√ß√£o
  const handleMigrationComplete = (results) => {
    console.log('Migra√ß√£o conclu√≠da:', results);
    // Recarregar tarefas para mostrar dados migrados
    window.location.reload();
  };

  const theme = createTheme({
    palette: {
      mode: darkMode ? 'dark' : 'light',
      primary: {
        main: '#1976d2',
      },
      secondary: {
        main: '#dc004e',
      },
    },
  });

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Box sx={{ flexGrow: 1 }}>
        <AppBar position="static">
          <Toolbar>
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              TaskTracker - Gest√£o de Tarefas
              {currentRoom && (
                <Typography variant="caption" sx={{ ml: 2, opacity: 0.8 }}>
                  Sala: {currentRoom}
                </Typography>
              )}
              {isDemoMode && (
                <Chip
                  label="MODO DEMO"
                  color="success"
                  size="small"
                  sx={{ ml: 2, fontWeight: 'bold' }}
                />
              )}
            </Typography>
            
            {!showGoogleAuth && (
              <Tooltip title="Trocar de sala">
                <IconButton color="inherit" onClick={handleOpenRoomSelector}>
                  <GroupIcon />
                </IconButton>
              </Tooltip>
            )}
            
            {!showGoogleAuth && currentRoom && (
              <Tooltip title={`Copiar ID da sala: ${currentRoom}`}>
                <IconButton 
                  color="inherit" 
                  onClick={handleCopyRoomId}
                  sx={{ 
                    bgcolor: 'rgba(25, 118, 210, 0.1)',
                    '&:hover': { bgcolor: 'rgba(25, 118, 210, 0.2)' }
                  }}
                >
                  <CopyIcon />
                </IconButton>
              </Tooltip>
            )}
            
            <Tooltip title={showGoogleAuth ? "Modo Local" : "Modo Google Sheets"}>
              <IconButton color="inherit" onClick={handleToggleGoogleSheets}>
                <GoogleIcon />
              </IconButton>
            </Tooltip>

            {/* Bot√µes de autentica√ß√£o para teste */}
            {isSupabaseConfigured() && !auth?.isAuthenticated && (
              <>
                <Tooltip title="üìù Cadastrar Usu√°rio">
                  <IconButton 
                    color="inherit" 
                    onClick={handleTestSignUp}
                    sx={{ 
                      bgcolor: 'rgba(33, 150, 243, 0.1)',
                      '&:hover': { bgcolor: 'rgba(33, 150, 243, 0.2)' }
                    }}
                  >
                    üìù
                  </IconButton>
                </Tooltip>
                
                <Tooltip title="üîê Fazer Login">
                  <IconButton 
                    color="inherit" 
                    onClick={handleTestLogin}
                    sx={{ 
                      bgcolor: 'rgba(255, 152, 0, 0.1)',
                      '&:hover': { bgcolor: 'rgba(255, 152, 0, 0.2)' }
                    }}
                  >
                    üîê
                  </IconButton>
                </Tooltip>
              </>
            )}

            {/* Bot√£o de logout quando autenticado */}
            {isSupabaseConfigured() && auth?.isAuthenticated && (
              <Tooltip title={`üë§ ${auth.user?.email} (Logout)`}>
                <IconButton 
                  color="inherit" 
                  onClick={handleTestLogout}
                  sx={{ 
                    bgcolor: 'rgba(76, 175, 80, 0.2)',
                    '&:hover': { bgcolor: 'rgba(76, 175, 80, 0.3)' }
                  }}
                >
                  üë§
                </IconButton>
              </Tooltip>
            )}

            {/* Bot√£o de migra√ß√£o para Supabase - s√≥ quando autenticado */}
            {isSupabaseConfigured() && auth?.isAuthenticated && (
              <Tooltip title="üì¶ Migrar dados localStorage ‚Üí Supabase">
                <IconButton 
                  color="inherit" 
                  onClick={handleOpenMigrationWizard}
                  sx={{ 
                    bgcolor: 'rgba(63, 81, 181, 0.1)',
                    '&:hover': { bgcolor: 'rgba(63, 81, 181, 0.2)' }
                  }}
                >
                  <MigrateIcon />
                </IconButton>
              </Tooltip>
            )}

            {/* Bot√£o para testar wizard (desenvolvimento) */}
            <Tooltip title="üéØ Testar Wizard de Primeiro Acesso">
              <IconButton 
                color="inherit" 
                onClick={handleTestWizard}
                sx={{ 
                  bgcolor: 'rgba(255, 152, 0, 0.1)',
                  '&:hover': { bgcolor: 'rgba(255, 152, 0, 0.2)' }
                }}
              >
                üéØ
              </IconButton>
            </Tooltip>

            {/* Bot√£o de testes de integra√ß√£o */}
            {isSupabaseConfigured() && (
              <Tooltip title="üß™ Executar Testes de Integra√ß√£o">
                <IconButton 
                  color="inherit" 
                  onClick={() => setIntegrationTestsOpen(true)}
                  sx={{ 
                    bgcolor: 'rgba(156, 39, 176, 0.1)',
                    '&:hover': { bgcolor: 'rgba(156, 39, 176, 0.2)' }
                  }}
                >
                  <TestIcon />
                </IconButton>
              </Tooltip>
            )}

            {/* Bot√£o de salvar tarefas no Supabase */}
            <Tooltip title="üíæ Salvar todas as tarefas no Supabase">
              <IconButton 
                color="inherit" 
                onClick={handleForceSaveToSupabase}
                sx={{ 
                  bgcolor: 'rgba(76, 175, 80, 0.1)',
                  '&:hover': { bgcolor: 'rgba(76, 175, 80, 0.2)' }
                }}
              >
                <SaveIcon />
              </IconButton>
            </Tooltip>
            
            {user && (
              <>
                <Tooltip title="Sincronizar agora">
                  <IconButton color="inherit" onClick={handleManualSync} disabled={!isOnline}>
                    {syncStatus === 'syncing' ? <CircularProgress size={20} /> : <CloudSyncIcon />}
                  </IconButton>
                </Tooltip>
                
                <Tooltip title="Compartilhar projeto">
                  <IconButton color="inherit" onClick={() => setCurrentTab(5)}>
                    <ShareIcon />
                  </IconButton>
                </Tooltip>
              </>
            )}
            
            {/* Status de sincroniza√ß√£o */}
            {syncStatus && (
              <Box sx={{ ml: 1 }}>
                <Chip
                  label={
                    syncStatus === 'syncing' ? 'Sincronizando...' :
                    syncStatus === 'success' ? 'Sincronizado' :
                    syncStatus === 'error' ? 'Erro na sincroniza√ß√£o' : ''
                  }
                  color={
                    syncStatus === 'syncing' ? 'info' :
                    syncStatus === 'success' ? 'success' :
                    syncStatus === 'error' ? 'error' : 'default'
                  }
                  size="small"
                />
              </Box>
            )}
            
            {!isOnline && (
              <Chip
                label="Offline"
                color="warning"
                size="small"
                sx={{ ml: 1 }}
              />
            )}
            
            <input
              accept=".xlsx,.xls,.csv"
              style={{ display: 'none' }}
              id="excel-upload"
              type="file"
              onChange={handleFileUpload}
            />
            <label htmlFor="excel-upload">
              <Tooltip title="Importar Excel/CSV">
                <IconButton color="inherit" component="span">
                  <UploadIcon />
                </IconButton>
              </Tooltip>
            </label>
            
            <Tooltip title="Download de todos os dados">
              <IconButton color="inherit" onClick={handleDownloadData}>
                <DownloadIcon />
              </IconButton>
            </Tooltip>
            
            <Tooltip title="Zerar todas as atividades">
              <IconButton color="inherit" onClick={handleClearTasks}>
                <DeleteIcon />
              </IconButton>
            </Tooltip>
            
            <Tooltip title="Alternar tema">
              <IconButton color="inherit" onClick={toggleDarkMode}>
                {darkMode ? <Brightness7 /> : <Brightness4 />}
              </IconButton>
            </Tooltip>
          </Toolbar>
        </AppBar>
        
        {/* Alertas WIP Globais */}
        <Fade in={wipViolations.length > 0}>
          <Box sx={{ 
            position: 'sticky', 
            top: 64, 
            zIndex: 1000,
            mx: 2,
            mt: 1
          }}>
            <Alert 
              severity="warning" 
              sx={{ 
                boxShadow: 3,
                borderRadius: 2,
                border: '1px solid #ed6c02'
              }}
            >
              <AlertTitle>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  ‚ö†Ô∏è Limites WIP Violados
                  <Box 
                    component="span" 
                    sx={{ 
                      backgroundColor: 'warning.main',
                      color: 'white',
                      borderRadius: '50%',
                      width: 24,
                      height: 24,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '0.8rem',
                      fontWeight: 'bold'
                    }}
                  >
                    {wipViolations.length}
                  </Box>
                </Box>
              </AlertTitle>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>
                {wipViolations.map((violation, index) => (
                  <Typography key={violation.status} variant="body2">
                    ‚Ä¢ <strong>{violation.status}</strong>: {violation.current} tarefas 
                    (limite: {violation.limit}) - 
                    <span style={{ color: 'red', fontWeight: 'bold' }}> 
                      {violation.excess} acima do limite
                    </span>
                  </Typography>
                ))}
              </Box>
            </Alert>
          </Box>
        </Fade>
        
        <Container maxWidth="xl">
          {showGoogleAuth ? (
            <Box sx={{ mt: 4 }}>
              <GoogleSheetsSimple 
                onBackToLocal={handleToggleGoogleSheets}
                onDemoMode={handleDemoMode}
              />
            </Box>
          ) : (
            <>
              {/* Informa√ß√µes do Modo Demo */}
              {demoDescription && (
                <DemoModeInfo
                  demoDescription={demoDescription}
                  onClose={handleCloseDemoInfo}
                />
              )}
              
              <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
                <Tabs value={currentTab} onChange={handleTabChange}>
                  <Tab 
                    icon={<DashboardIcon />} 
                    label="Kanban" 
                    iconPosition="start"
                  />
                  <Tab 
                    icon={<TableIcon />} 
                    label="Tabela" 
                    iconPosition="start"
                  />
                  <Tab 
                    icon={<AnalyticsIcon />} 
                    label="Burndown" 
                    iconPosition="start"
                  />
                  <Tab 
                    icon={<SpeedIcon />} 
                    label="WIP" 
                    iconPosition="start"
                  />
                  <Tab 
                    icon={<PsychologyIcon />} 
                    label="An√°lise Preditiva" 
                    iconPosition="start"
                  />
                  {user && (
                    <Tab 
                      icon={<ShareIcon />} 
                      label="Compartilhar" 
                      iconPosition="start"
                    />
                  )}
                </Tabs>
              </Box>
              
              <TabPanel value={currentTab} index={0}>
                <SimpleKanban tasks={tasks} onTasksUpdate={handleTasksUpdate} />
              </TabPanel>
              
              <TabPanel value={currentTab} index={1}>
                <TableView tasks={tasks} onTasksUpdate={handleTasksUpdate} />
              </TabPanel>
              
              <TabPanel value={currentTab} index={2}>
                <BurndownChart tasks={tasks} />
              </TabPanel>
              
              <TabPanel value={currentTab} index={3}>
                <WIPControl tasks={tasks} onTasksUpdate={handleTasksUpdate} />
              </TabPanel>
              
              <TabPanel value={currentTab} index={4}>
                <PredictiveAnalysis tasks={tasks} />
              </TabPanel>
              
              {user && (
                <TabPanel value={currentTab} index={5}>
                  <ProjectSharing 
                    projectInfo={projectInfo} 
                    onUpdate={setProjectInfo}
                  />
                </TabPanel>
              )}
            </>
          )}
        </Container>
        
        {!showGoogleAuth && (
          <RoomSelector 
            open={roomSelectorOpen}
            onRoomSelected={handleRoomSelected}
            initialRoomCode={wizardResult?.mode === 'shared' ? wizardResult.roomCode : ''}
          />
        )}

        {/* Migration Wizard */}
        <MigrationWizard 
          open={migrationWizardOpen}
          onClose={() => setMigrationWizardOpen(false)}
          onComplete={handleMigrationComplete}
        />

        {/* Integration Tests */}
        <IntegrationTests 
          open={integrationTestsOpen}
          onClose={() => setIntegrationTestsOpen(false)}
        />

        {/* Welcome Wizard - Primeiro Acesso */}
        <WelcomeWizard 
          open={showWelcomeWizard}
          onComplete={handleWizardComplete}
        />
      </Box>
    </ThemeProvider>
  );
}

// Wrapper principal com AuthProvider + TaskProvider
function App() {
  return (
    <AuthProvider>
      <TaskProvider>
        <AppContent />
      </TaskProvider>
    </AuthProvider>
  );
}

export default App;