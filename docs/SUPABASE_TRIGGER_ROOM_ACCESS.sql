-- =============================================
-- TRIGGER AUTOM√ÅTICO: ROOM_ACCESS PARA PROPRIET√ÅRIO
-- Execute este SQL para criar trigger que garante acesso autom√°tico
-- =============================================

-- =============================================
-- 1. CRIAR FUN√á√ÉO DO TRIGGER
-- =============================================

CREATE OR REPLACE FUNCTION create_owner_access()
RETURNS TRIGGER AS $$
BEGIN
    -- Inserir acesso autom√°tico para o propriet√°rio da sala
    INSERT INTO room_access (room_id, user_id, role, granted_by, created_at)
    VALUES (
        NEW.id,           -- room_id
        NEW.owner_id,     -- user_id (propriet√°rio)
        'admin',          -- role (admin para o propriet√°rio)
        NEW.owner_id,     -- granted_by (concedido por si mesmo)
        NOW()             -- created_at
    );
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =============================================
-- 2. CRIAR O TRIGGER
-- =============================================

-- Remover trigger existente se houver
DROP TRIGGER IF EXISTS trigger_create_owner_access ON rooms;

-- Criar o trigger
CREATE TRIGGER trigger_create_owner_access
    AFTER INSERT ON rooms
    FOR EACH ROW
    EXECUTE FUNCTION create_owner_access();

-- =============================================
-- 3. TESTAR O TRIGGER
-- =============================================

-- Fun√ß√£o para testar se o trigger est√° funcionando
DO $$
DECLARE
    test_room_id UUID;
    test_user_id UUID;
    access_count INTEGER;
BEGIN
    -- Obter um usu√°rio existente para teste
    SELECT id INTO test_user_id FROM auth.users LIMIT 1;
    
    IF test_user_id IS NOT NULL THEN
        -- Criar uma sala de teste
        INSERT INTO rooms (name, description, room_code, owner_id, is_public)
        VALUES ('Teste Trigger', 'Sala criada para testar o trigger', 'TRIGGER_TEST', test_user_id, false)
        RETURNING id INTO test_room_id;
        
        -- Verificar se o acesso foi criado automaticamente
        SELECT COUNT(*) INTO access_count
        FROM room_access 
        WHERE room_id = test_room_id AND user_id = test_user_id;
        
        IF access_count > 0 THEN
            RAISE NOTICE '‚úÖ TRIGGER FUNCIONANDO: Acesso autom√°tico criado para sala %', test_room_id;
        ELSE
            RAISE NOTICE '‚ùå TRIGGER FALHOU: Nenhum acesso criado para sala %', test_room_id;
        END IF;
        
        -- Limpar teste
        DELETE FROM rooms WHERE id = test_room_id;
        
    ELSE
        RAISE NOTICE '‚ö†Ô∏è TESTE IGNORADO: Nenhum usu√°rio encontrado na tabela auth.users';
    END IF;
END;
$$;

-- =============================================
-- 4. VERIFICAR SE O TRIGGER FOI CRIADO
-- =============================================

SELECT 
    'üîß VERIFICA√á√ÉO DO TRIGGER' as status,
    trigger_name,
    event_manipulation,
    action_timing,
    action_statement
FROM information_schema.triggers 
WHERE trigger_name = 'trigger_create_owner_access'
AND event_object_table = 'rooms';

-- =============================================
-- 5. POL√çTICAS RLS COMPLEMENTARES
-- =============================================

-- Garantir que as pol√≠ticas RLS est√£o corretas para room_access
-- (Voc√™ pode pular esta parte se as pol√≠ticas j√° est√£o corretas)

-- Pol√≠tica para permitir que usu√°rios vejam seus pr√≥prios acessos
DROP POLICY IF EXISTS "Users can view their own room access" ON room_access;
CREATE POLICY "Users can view their own room access" ON room_access
    FOR SELECT USING (auth.uid() = user_id);

-- Pol√≠tica para permitir que propriet√°rios de sala concedam acesso
DROP POLICY IF EXISTS "Room owners can manage access" ON room_access;
CREATE POLICY "Room owners can manage access" ON room_access
    FOR ALL USING (
        auth.uid() IN (
            SELECT owner_id FROM rooms WHERE id = room_id
        )
    );

-- Pol√≠tica para permitir que o trigger insira automaticamente
DROP POLICY IF EXISTS "Auto-insert owner access" ON room_access;
CREATE POLICY "Auto-insert owner access" ON room_access
    FOR INSERT WITH CHECK (
        auth.uid() = user_id  -- Apenas para o pr√≥prio usu√°rio
        OR auth.uid() IN (    -- Ou para propriet√°rio da sala
            SELECT owner_id FROM rooms WHERE id = room_id
        )
    );

-- =============================================
-- 6. INSTRU√á√ïES FINAIS
-- =============================================

SELECT 
    'üìã INSTRU√á√ïES FINAIS' as instrucoes,
    '
‚úÖ TRIGGER INSTALADO COM SUCESSO!

üîÑ O QUE ACONTECE AGORA:
‚Ä¢ Toda nova sala criada ter√° acesso autom√°tico para o propriet√°rio
‚Ä¢ N√£o √© mais necess√°rio criar room_access manualmente
‚Ä¢ O c√≥digo do SupabaseService.createRoom() pode ser simplificado

üß™ PARA TESTAR:
1. Execute os testes de integra√ß√£o novamente
2. Crie uma nova sala pelo TaskTracker
3. A sala deve aparecer automaticamente na lista

‚ö†Ô∏è SALAS EXISTENTES:
‚Ä¢ Salas criadas antes deste trigger ainda podem ter o problema
‚Ä¢ Execute o script SUPABASE_CORRIGIR_ROOM_ACCESS.sql para corrigir

üóëÔ∏è LIMPEZA (SE NECESS√ÅRIO):
‚Ä¢ Para remover o trigger: DROP TRIGGER trigger_create_owner_access ON rooms;
‚Ä¢ Para remover a fun√ß√£o: DROP FUNCTION create_owner_access();
    ' as explicacao;

-- =============================================
-- 7. LOG FINAL
-- =============================================

SELECT 
    'üéØ INSTALA√á√ÉO CONCLU√çDA' as resultado,
    'Trigger de acesso autom√°tico instalado com sucesso' as mensagem,
    NOW() as instalado_em;