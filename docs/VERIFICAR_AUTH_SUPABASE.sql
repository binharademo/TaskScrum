-- =============================================
-- VERIFICAR AUTENTICA√á√ÉO NO SUPABASE
-- Este script ajuda a diagnosticar problemas de auth
-- =============================================

-- =============================================
-- 1. VERIFICAR SE auth.uid() EST√Å FUNCIONANDO
-- =============================================
SELECT 
    'üîë VERIFICA√á√ÉO DE AUTENTICA√á√ÉO' as check_type,
    auth.uid() as current_user_id,
    auth.email() as current_user_email,
    CASE 
        WHEN auth.uid() IS NOT NULL THEN '‚úÖ USU√ÅRIO LOGADO NO SUPABASE'
        ELSE '‚ùå USU√ÅRIO N√ÉO LOGADO NO SUPABASE'
    END as auth_status;

-- =============================================
-- 2. VERIFICAR USU√ÅRIOS EXISTENTES
-- =============================================
SELECT 
    'üë• USU√ÅRIOS CADASTRADOS' as info,
    id,
    email,
    created_at,
    email_confirmed_at IS NOT NULL as email_confirmado,
    last_sign_in_at
FROM auth.users 
ORDER BY created_at DESC
LIMIT 5;

-- =============================================
-- 3. BUSCAR SEU USU√ÅRIO ESPEC√çFICO
-- =============================================
SELECT 
    'üéØ SEU USU√ÅRIO ESPEC√çFICO' as info,
    id,
    email,
    created_at,
    email_confirmed_at IS NOT NULL as email_confirmado,
    last_sign_in_at,
    CASE 
        WHEN email_confirmed_at IS NOT NULL THEN '‚úÖ EMAIL CONFIRMADO'
        ELSE '‚ö†Ô∏è EMAIL N√ÉO CONFIRMADO'
    END as status_email
FROM auth.users 
WHERE email = 'binhara@azuris.com.br';

-- =============================================
-- 4. VERIFICAR SALAS DESTE USU√ÅRIO ESPEC√çFICO
-- =============================================
SELECT 
    'üè† SALAS DO USU√ÅRIO binhara@azuris.com.br' as info,
    r.name,
    r.room_code,
    r.created_at,
    'Propriet√°rio' as papel
FROM rooms r
JOIN auth.users u ON r.owner_id = u.id
WHERE u.email = 'binhara@azuris.com.br'

UNION ALL

SELECT 
    'üè† SALAS COM ACESSO PARA binhara@azuris.com.br' as info,
    r.name,
    r.room_code,
    r.created_at,
    ra.role as papel
FROM rooms r
JOIN room_access ra ON r.id = ra.room_id
JOIN auth.users u ON ra.user_id = u.id
WHERE u.email = 'binhara@azuris.com.br'
ORDER BY created_at DESC;

-- =============================================
-- 5. VERIFICAR ESPECIFICAMENTE A SALA DEFAULT_ROOM
-- =============================================
SELECT 
    'üìç SALA DEFAULT_ROOM - DETALHES COMPLETOS' as info,
    r.id,
    r.name,
    r.room_code,
    r.owner_id,
    u.email as proprietario_email,
    r.created_at
FROM rooms r
LEFT JOIN auth.users u ON r.owner_id = u.id
WHERE r.room_code = 'DEFAULT_ROOM';

-- =============================================
-- 6. ACESSOS √Ä SALA DEFAULT_ROOM
-- =============================================
SELECT 
    'üîê ACESSOS √Ä SALA DEFAULT_ROOM' as info,
    ra.user_id,
    u.email,
    ra.role,
    ra.created_at
FROM room_access ra
JOIN rooms r ON ra.room_id = r.id
LEFT JOIN auth.users u ON ra.user_id = u.id
WHERE r.room_code = 'DEFAULT_ROOM';

-- =============================================
-- 7. DIAGN√ìSTICO FINAL
-- =============================================
SELECT 
    'üéØ DIAGN√ìSTICO FINAL' as resultado,
    CASE 
        WHEN NOT EXISTS (SELECT 1 FROM auth.users WHERE email = 'binhara@azuris.com.br')
            THEN '‚ùå USU√ÅRIO binhara@azuris.com.br N√ÉO EXISTE NO SUPABASE'
        WHEN EXISTS (SELECT 1 FROM auth.users WHERE email = 'binhara@azuris.com.br' AND email_confirmed_at IS NULL)
            THEN '‚ö†Ô∏è USU√ÅRIO EXISTE MAS EMAIL N√ÉO CONFIRMADO'
        WHEN NOT EXISTS (SELECT 1 FROM rooms WHERE room_code = 'DEFAULT_ROOM')
            THEN '‚ùå SALA DEFAULT_ROOM N√ÉO EXISTE'
        WHEN NOT EXISTS (
            SELECT 1 
            FROM room_access ra 
            JOIN rooms r ON ra.room_id = r.id 
            JOIN auth.users u ON ra.user_id = u.id
            WHERE r.room_code = 'DEFAULT_ROOM' AND u.email = 'binhara@azuris.com.br'
        ) THEN '‚ùå USU√ÅRIO SEM ACESSO √Ä SALA DEFAULT_ROOM'
        ELSE '‚úÖ TUDO PARECE OK - PROBLEMA √â DE SESS√ÉO/AUTH'
    END as status;